scalar Date

type Identity {
  id: ID!
  accounts(filter: AccountFilterInput, first: Int, after: String): AccountConnection
}

input AccountFilterInput {
    dummy: String
}

type AccountConnection {
  pageInfo: PageInfo!
  edges: [AccountEdge!]!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
}

type AccountEdge {
  cursor: String!
  node: Account!
}

type Account {
  id: ID!
  archivedAt: Date
  branch: String
  closedAt: Date
  createdAt: Date!
  cacheExpiredAt: Date
  currency: String
  requiredInformationCompleted: Boolean
  tags: [String]
  linkedAccount: Account
  custodianAccounts: [CustodianAccount!]!
  financials: AccountFinancials!
  status: String!
  type: String
}

type CustodianAccount {
  id: ID!
  branch: String
  custodian: String
  status: String!
  updatedAt: Date
  financials: CustodianAccountFinancials
}

type CustodianAccountFinancials {
  current: CustodianAccountCurrentFinancialValues
  balance: [Balance!]
}

type Balance {
  quantity: String!
  securityId: String!
}

type CustodianAccountCurrentFinancialValues {
  deposits: Money!
  earnings: Money!
  netDeposits: Money!
  netLiquidationValue: Money!
  withdrawals: Money!
}

type AccountFinancials {
  currentCombined: AccountCurrentFinancials
}

type AccountCurrentFinancials {
  id: ID!
  netLiquidationValueV2: Money
  netDeposits: Money
  simpleReturns(referenceDate: Date): SimpleReturns
}

type Money {
  amount: String!
  cents: Int!
  currency: String!
}

type SimpleReturns {
  amount: Money!
  asOf: Date
  rate: String!
  referenceDate: Date
}